def backtracking_search(csp):
    """Performs backtracking search to solve the CSP."""
    return backtrack({}, csp)

def backtrack(assignment, csp):
    """Recursive backtracking algorithm."""
    if len(assignment) == len(csp['variables']):
        return assignment
    
    var = select_unassigned_variable(assignment, csp)
    for value in order_domain_values(var, assignment, csp):
        if is_consistent(var, value, assignment, csp):
            assignment[var] = value
            result = backtrack(assignment, csp)
            if result:
                return result
            del assignment[var]
    
    return None

def select_unassigned_variable(assignment, csp):
    """Selects the next unassigned variable."""
    for var in csp['variables']:
        if var not in assignment:
            return var

def order_domain_values(var, assignment, csp):
    """Orders the domain values for a variable."""
    return csp['domains'][var]

def is_consistent(var, value, assignment, csp):
    """Checks if the assignment is consistent with the CSP constraints."""
    for neighbor in csp['neighbors'][var]:
        if neighbor in assignment and assignment[neighbor] == value:
            return False
    return True

def create_map_coloring_csp():
    """Creates a CSP for the map coloring problem."""
    csp = {
        'variables': ['WA', 'NT', 'SA', 'Q', 'NSW', 'V', 'T'],
        'domains': {
            'WA': ['Red', 'Green', 'Blue'],
            'NT': ['Red', 'Green', 'Blue'],
            'SA': ['Red', 'Green', 'Blue'],
            'Q': ['Red', 'Green', 'Blue'],
            'NSW': ['Red', 'Green', 'Blue'],
            'V': ['Red', 'Green', 'Blue'],
            'T': ['Red', 'Green', 'Blue'],
        },
        'neighbors': {
            'WA': ['NT', 'SA'],
            'NT': ['WA', 'SA', 'Q'],
            'SA': ['WA', 'NT', 'Q', 'NSW', 'V'],
            'Q': ['NT', 'SA', 'NSW'],
            'NSW': ['Q', 'SA', 'V'],
            'V': ['SA', 'NSW'],
            'T': [],
        }
    }
    return csp

# Create the CSP instance for map coloring
csp = create_map_coloring_csp()

# Perform the backtracking search to find a solution
solution = backtracking_search(csp)

# Print the solution
print("Solution:")
print(solution)
