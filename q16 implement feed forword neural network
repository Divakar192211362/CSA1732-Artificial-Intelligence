import numpy as np

class FeedforwardNeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        # Initialize weights and biases
        self.weights_input_hidden = np.random.randn(input_size, hidden_size)
        self.weights_hidden_output = np.random.randn(hidden_size, output_size)
        self.bias_hidden = np.zeros((1, hidden_size))
        self.bias_output = np.zeros((1, output_size))

    def sigmoid(self, x):
        return 1 / (1 + np.exp(-x))

    def sigmoid_derivative(self, x):
        return x * (1 - x)

    def forward(self, inputs):
        # Forward pass
        self.hidden_input = np.dot(inputs, self.weights_input_hidden) + self.bias_hidden
        self.hidden_output = self.sigmoid(self.hidden_input)
        self.final_input = np.dot(self.hidden_output, self.weights_hidden_output) + self.bias_output
        self.final_output = self.sigmoid(self.final_input)
        return self.final_output

    def backward(self, inputs, expected_output, learning_rate):
        # Calculate the error
        output_error = expected_output - self.final_output
        output_delta = output_error * self.sigmoid_derivative(self.final_output)

        hidden_error = output_delta.dot(self.weights_hidden_output.T)
        hidden_delta = hidden_error * self.sigmoid_derivative(self.hidden_output)

        # Update weights and biases
        self.weights_hidden_output += self.hidden_output.T.dot(output_delta) * learning_rate
        self.weights_input_hidden += inputs.T.dot(hidden_delta) * learning_rate
        self.bias_output += np.sum(output_delta, axis=0, keepdims=True) * learning_rate
        self.bias_hidden += np.sum(hidden_delta, axis=0, keepdims=True) * learning_rate

    def train(self, inputs, expected_output, learning_rate, epochs):
        for epoch in range(epochs):
            self.forward(inputs)
            self.backward(inputs, expected_output, learning_rate)
            if epoch % 1000 == 0:
                loss = np.mean(np.square(expected_output - self.final_output))
                print(f'Epoch {epoch}, Loss: {loss}')

# Example usage:
if __name__ == "__main__":
    # Input data (4 samples, 2 features each)
    X = np.array([[0, 0],
                  [0, 1],
                  [1, 0],
                  [1, 1]])
    
    # Expected output (4 samples, 1 target value each)
    y = np.array([[0], [1], [1], [0]])  # XOR problem

    # Network configuration
    input_size = 2
    hidden_size = 2
    output_size = 1
    learning_rate = 0.1
    epochs = 10000

    # Initialize and train the network
    nn = FeedforwardNeuralNetwork(input_size, hidden_size, output_size)
    nn.train(X, y, learning_rate, epochs)

    # Test the network
    print("Predictions:")
    print(nn.forward(X))
